Estructura recursosIPCS {
    entero idBuzon;
    struct semid_ds ssd;
    entero idSemaforo;
    entero nTrenes;
    entero idBuzonMsj;
}

Estructura tipoMensaje {
    long tipo;
}

Funci贸n signalHandler(n) {
    // ...
}

Funci贸n comprobarPrimerArgumento(argv) {
    // ...
}

Funci贸n comprobarSegundoArgumento(argv) {
    // ...
}

Principal
    Si argc < 2 Entonces
        Imprimir "Usage: lomo --mapa"
        Imprimir "Other Usage: lomo retardo nTrenes"
        Retornar 1
    Fin Si

    Si argc = 2 Y argv[1] == "--mapa" Entonces
        Si LOMO_generar_mapa("i0959394","i0919297") == -1 Entonces
            Imprimir "Error al generar el mapa."
            Retornar 1
        Sino
            Imprimir "Mapa generado correctamente."
            Retornar 1
        Fin Si
    Fin Si

    Si comprobarPrimerArgumento(argv[1]) != -1 Y comprobarSegundoArgumento(argv[2]) != -1 Entonces
        entero retardo = 0
        recursosIPCS.nTrenes = 0
        tipoMensaje tipoMensajes

        Si (recursosIPCS.idBuzon = msgget(IPC_PRIVATE,IPC_CREAT | 0600)) == -1 Entonces
            Imprimir "No se ha podido crear el buzon."
        Fin Si

        Si (recursosIPCS.idSemaforo = semget(IPC_PRIVATE,1,IPC_CREAT | 0600)) == -1 Entonces
            Imprimir "No se ha podido crear el semaforo."
        Fin Si

        Si (recursosIPCS.idBuzonMsj = msgget(IPC_PRIVATE,IPC_CREAT | 0600)) == -1 Entonces
            Imprimir "No se ha podido crear el buzon de mensajes."
        Fin Si

        struct sigaction aux
        struct sigaction ss

        ss.sa_handler = &signalHandler
        ss.sa_flags = 0

        Si sigemptyset(&ss.sa_mask) == -1 Entonces
            Imprimir "sigemptyset ERROR."
        Fin Si

        Si sigaddset(&ss.sa_mask,SIGINT) == -1 Entonces
            Imprimir "sigaddset ERROR."
        Fin Si

        Si sigaction(SIGINT,&ss,&aux) == -1 Entonces
            Imprimir "sigaction ERROR."
        Fin Si

        Si (retardo = comprobarPrimerArgumento(argv[1])) == -1 Entonces
            Imprimir "El primer argumento debe ser o 0 o 1."
            Retornar 1
        Fin Si

        Si (recursosIPCS.nTrenes = comprobarSegundoArgumento(argv[2])) == -1 Entonces
            Imprimir "El segundo argumento debe ser un numero."
            Retornar 1
        Fin Si
        Si (LOMO_inicio(retardo,recursosIPCS.idSemaforo,recursosIPCS.idBuzon,"i0959394","i0919297") == -1){
            Imprimir "Error al iniciar LOCOMOTION."
            Retornar 1;
        }
 siguiente -> linea 99======================================================================
       
       
       Funci贸n comprobarSegundoArgumento(argv) {
            entero lenArgv <- strlen(argv)
            entero i
            para i <- 0 hasta lenArgv hacer {
                Si (!isdigit(argv[i]))
                    Retornar -1;
            }
            Si (atoi(argv) < 0 || atoi(argv) > 100)
                Retornar -1;
            Retornar atoi(argv);
        }
